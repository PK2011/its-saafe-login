// The mixin is loaded globally from vite.config.js.

@use 'sass:color';

/**
 * Generates a color palette based on a given base color.
 *
 * This mixin creates a set of related colors by mixing the base color with white (for lighter shades)
 * and black (for darker shades). It outputs these colors as CSS variables (custom properties).
 *
 * @param {Color} $base-color The base color for the palette (e.g., #007bff, rgb(0, 123, 255), blue).
 * @param {String} $name [primary] The name to use as a prefix for the generated CSS variables.
 *                           For example, if `$name` is "primary", the variables will be
 *                           `--primary-1`, `--primary-2`, etc. Defaults to "primary".
 *
 * @example
 * :root {
 *   $my-blue: #007bff;
 *   @include generate-palette($my-blue, "blue"); // Generates --blue-1, --blue-2, ...
 *
 *   $my-green: green;
 *   @include generate-palette($my-green); // Generates --primary-1, --primary-2, ... (default name)
 * }
 *
 * .element {
 *   background-color: var(--blue-3);
 *   color: var(--primary-8);
 * }
 */
@mixin generate-palette($base-color, $name: 'primary') {
  $lightest: color.mix(white, $base-color, 95%);
  $lighter-4: color.mix(white, $base-color, 85%);
  $lighter-3: color.mix(white, $base-color, 80%);
  $lighter-2: color.mix(white, $base-color, 70%);
  $lighter-1: color.mix(white, $base-color, 50%);
  $base: $base-color;
  $darker-1: color.mix(black, $base-color, 30%);
  $darker-2: color.mix(black, $base-color, 60%);

  // Output the color variables
  --#{$name}-1: #{$lightest};
  --#{$name}-2: #{$lighter-4};
  --#{$name}-3: #{$lighter-3};
  --#{$name}-4: #{$lighter-2};
  --#{$name}-5: #{$lighter-1};
  --#{$name}-6: #{$base};
  --#{$name}-7: #{color.mix($base, $darker-1, 50%)};
  --#{$name}-8: #{$darker-1};
  --#{$name}-9: #{$darker-2};
}

/**
 * Generates a set of overlay colors based on a given base color.
 *
 * @param {Color} $base-color The base color for the overlays.
 * @param {String} $color-name The name to use for the generated CSS variables. Don't use space. (e.g., "primary", "secondary").
 *
 * @example
 * :root {
 *   $primary-color: #0069e8;
 *   @include generate-layouts-overlay($primary-color, "primary");
 * }
 *
 * .element {
 *   background-color: var(--primary-overlay-2);
 * }
 */
@mixin generate-layouts-overlay($base-color, $color-name) {
  // Extract RGB values from the base color
  $base-r: color.channel($base-color, 'red', $space: rgb);
  $base-g: color.channel($base-color, 'green', $space: rgb);
  $base-b: color.channel($base-color, 'blue', $space: rgb);

  // Create overlay colors using the base color's RGB values
  $overlay-1: rgba($base-r, $base-g, $base-b, 0.1);
  $overlay-2: rgba($base-r, $base-g, $base-b, 0.2);
  $overlay-4: rgba($base-r, $base-g, $base-b, 0.4);
  $overlay-7: rgba($base-r, $base-g, $base-b, 0.7);

  --#{$color-name}-overlay-1: #{$overlay-1};
  --#{$color-name}-overlay-2: #{$overlay-2};
  --#{$color-name}-overlay-4: #{$overlay-4};
  --#{$color-name}-overlay-7: #{$overlay-7};
}

/**
 * A mixin to generate font-weight utility classes and CSS custom properties.
 *
 * @param {String} $prefix - The prefix for the utility class names and custom properties.
 *                          Defaults to 'font-weight'.
 *
 * Example Usage:
 * @include font-weights(); // Default prefix 'font-weight'
 * @include font-weights('fw'); // Custom prefix 'fw'
 */
@mixin font-sizes($prefix: 'font') {
  .#{$prefix}-xl {
    font-size: 24px;
  }
  .#{$prefix}-l {
    font-size: 20px;
  }
  .#{$prefix}-m {
    font-size: 18px;
  }
  .#{$prefix}-default {
    font-size: 16px;
  }
  .#{$prefix}-sm {
    font-size: 14px;
  }
  .#{$prefix}-xs {
    font-size: 12px;
  }
  .#{$prefix}-tiny {
    font-size: 11px;
  }
  .#{$prefix}-tiny-caps {
    font-size: 10px;
    text-transform: uppercase; // Add uppercase transformation if needed
  }

  --#{$prefix}-xl: 24px;
  --#{$prefix}-l: 20px;
  --#{$prefix}-m: 18px;
  --#{$prefix}-default: 16px;
  --#{$prefix}-sm: 14px;
  --#{$prefix}-xs: 12px;
  --#{$prefix}-tiny: 11px;
  --#{$prefix}-tiny-caps: 10px;
}

/**
 * A mixin to generate font-weight utility classes and CSS custom properties.
 *
 * @param {String} $prefix - The prefix for the utility class names and custom properties.
 *                          Defaults to 'font-weight'.
 *
 * Example Usage:
 * @include font-weights(); // Default prefix 'font-weight'
 * @include font-weights('fw'); // Custom prefix 'fw'
 */
@mixin font-weights($prefix: 'font-weight') {
  .#{$prefix}-light {
    font-weight: 300;
  }
  .#{$prefix}-regular {
    font-weight: 400;
  }
  .#{$prefix}-semibold {
    font-weight: 600; // use this weight for links and heading tags
  }
  .#{$prefix}-bold {
    font-weight: 700;
  }
  .#{$prefix}-black {
    font-weight: 800;
  }
  --#{$prefix}-light: 300;
  --#{$prefix}-regular: 400;
  --#{$prefix}-semibold: 600;
  --#{$prefix}-bold: 700;
  --#{$prefix}-black: 800;
}

/**
 * A mixin to create a flex container that is centered both horizontally and vertically.
 * 
 * This mixin applies `display: flex`, `justify-content: center`, `align-items: center` for centering,
 * and allows customization of `flex-direction` and `gap` between flex items.
 *
 * @param {String} $flex-direction - Defines the direction of the flex container.
 *                                    Accepts values like 'row' (default) or 'column'.
 * @param {String} $gap - The gap between flex items. Defaults to '8px'.
 *
 * Example Usage:
 * @include flex-centered(); // Default setup with 'row' direction and '8px' gap.
 * @include flex-centered(column, 16px); // Customizes to column direction and '16px' gap.
 */
@mixin flex-centered($flex-direction: row, $gap: '8px') {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: $flex-direction;
  gap: $gap;
}

/**
 * A function to generate scaled values based on a base unit (8px).
 * 
 * This function ensures that the scaling factor is either a whole number or 0.5, 
 * and returns the computed value by multiplying the base unit (8px) with the specified multiple.
 *
 * @param {Number} $multiple - The multiplier for the base unit (8px). 
 *                              Only whole numbers or 0.5 are allowed.
 *                              Example: 1, 2, 3, 0.5.
 *
 * @returns {Number} - The scaled value, which is the result of multiplying 8px by the provided multiple.
 * 
 * @throws {Error} - If the `$multiple` is not a whole number or 0.5, an error is thrown.
 *
 * Example Usage:
 * $value: scale(3); // Returns 24px (8px * 3)
 * $half-value: scale(0.5); // Returns 4px (8px * 0.5)
 * 
 * Invalid Usage:
 * $invalid: scale(1.3); // Error: The value must be a whole number or 0.5.
 */
@function scale($multiple) {
  $base: 8px;

  @return $base * $multiple;
}
